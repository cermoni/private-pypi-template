name: Publish Release

on:
  push:
    tags:
      - 'v*.*.*'  # This triggers the workflow on version tags like v1.0.0

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install poetry twine setuptools wheel cython

      - name: Update version in pyproject.toml # Update the version in pyproject.toml
        run: |
          sed -i "s/^version = .*/version = \"${GITHUB_REF##*/}\"/" pyproject.toml
        shell: bash

      - name: Install project dependencies
        run: |
          poetry install

      - name: Build the package
        run: |
          ./scripts/build.sh

      - name: Create Release
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            const release = await github.repos.createRelease({
              owner, repo,
              tag_name: process.env.GITHUB_REF,
              draft: false,
              target_commitish: sha
            });

            for (let file of await fs.readdir('./dist')) {
              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
            }

      - name: Verify Build
        run: |
          echo "Verifying build files:"
          ls -l ./dist/
          echo "Root Folder:"
          ls -l

      - name: Upload to private PyPI
        env:
          PYPI_URL: ${{ secrets.PYPI_URL }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "Uploading to private PyPI..."
          twine upload --repository-url http://$PYPI_URL/ -u $PYPI_USERNAME -p $PYPI_PASSWORD ./dist/*.whl
          twine upload --repository-url http://$PYPI_URL/ -u $PYPI_USERNAME -p $PYPI_PASSWORD ./dist/*.tar.gz
